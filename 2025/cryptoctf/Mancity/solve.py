from Crypto.Util.number import *

n = 147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297
c = 77151713996168344370880352082934801122524956107256445231326053049976568087412199358725058612262271922128984783428798480191211811217854076875727477848490840660333035334309193217618178091153472265093622822195960145852562781183839474868269109313543427082414220136748700364027714272845969723750108397300867408537

x = (-n) % (2**256)
y = x
x -= 100
y += 100

def man(n):
	B = bin(n)[2:]
	M = ''
	for b in B:
		if b == '0':
			M += '01'
		else:
			M += '11'
	return int(M, 2)

while True:
	if isPrime(x):
		r = man(x)
		B = bin(x)[2:] + '1' * 256
		q = int(B, 2)
		if isPrime(q) and isPrime(r) and r*q == n:
			print(f"{x = }\n{q = }\n{r = }")
			break
	if isPrime(y):
		r = man(y)
		B = bin(y)[2:] + '1' * 256
		q = int(B, 2)
		if isPrime(q) and isPrime(r) and r*q == n:
			print(f"{y = }\n{q = }\n{r = }")
			break
	x -= 1
	y += 1

