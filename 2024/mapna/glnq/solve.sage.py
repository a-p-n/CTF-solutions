

# This file was *autogenerated* from the file /home/apn/Documents/bi0s/my_git/bi0s/ctf/mapna/glnq/solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_150 = Integer(150); _sage_const_8 = Integer(8); _sage_const_14 = Integer(14); _sage_const_0 = Integer(0); _sage_const_79229371458530696292133175295 = Integer(79229371458530696292133175295); _sage_const_1 = Integer(1); _sage_const_0p5 = RealNumber('0.5')
from Crypto.Util.number import *

P = _sage_const_2 
N = _sage_const_150 
F, k = GF(_sage_const_2 **_sage_const_8 ), _sage_const_14 
z8 = F.gens()[_sage_const_0 ]

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row)) for row in data.splitlines()]
    return rows

G = Matrix(F, load_matrix("/home/apn/Documents/bi0s/my_git/bi0s/ctf/mapna/glnq/generator.txt"))
A_pub = Matrix(F, load_matrix("/home/apn/Documents/bi0s/my_git/bi0s/ctf/mapna/glnq/alice.pub"))
H = Matrix(F, load_matrix("/home/apn/Documents/bi0s/my_git/bi0s/ctf/mapna/glnq/bob.pub"))

r = _sage_const_79229371458530696292133175295 

def babystep_giantstep(g, y, p):
    m = int((p-_sage_const_1 )**_sage_const_0p5  + _sage_const_0p5 )
    table = {}
    gr = _sage_const_1 
    for r in range(m):
        table[str(gr)] = r
        gr = gr * g
    gm = g**(-m)
    ygqm = y            
    for q in range(m):
        if str(ygqm) in table:
            return q * m + table[str(ygqm)]
        ygqm = ygqm * gm
    return None

def Pohlig_Hellman_DLP(P,sP,order):
    primes = []
    for i,k in factor(order):
        primes.append(i**k)
    dlogs = []
    for fac in primes:
        t = int(order) // int(fac)
        dlog = babystep_giantstep(P**t, sP**t, fac)
        assert  (P**t)**dlog == sP**t
        dlogs += [dlog]
        print("factor: "+str(fac)+", Discrete Log: "+str(dlog))
    return crt(dlogs, primes )


flag = int(Pohlig_Hellman_DLP(G,H,r))
assert G**flag == H
print(flag)

