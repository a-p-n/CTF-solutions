import hashlib
import ast

methods = ['md5', 'sha256', 'sha3_256', 'sha3_512', 'sha3_384', 'sha1', 'sha384', 'sha3_224', 'sha512', 'sha224']

def random_encrypt(x, method):
    hash_obj = hashlib.new(method)
    hash_obj.update(x.encode())
    return hash_obj.hexdigest()

def decrypt(encrypted_memory):
    decrypted_message = []

    for enc_hash in encrypted_memory:
        found = False
        for char in range(130):
            x = (char + 20) % 130
            x = hashlib.sha512(str(x).encode()).hexdigest()
            for method in methods:
                if random_encrypt(x, method) == enc_hash:
                    decrypted_message.append(chr(char))
                    found = True
                    break
            if found:
                break

    return ''.join(decrypted_message)

with open('encrypted_memory.txt', 'r') as f:
    encrypted_memory = ast.literal_eval(f.read())

decrypted_message = decrypt(encrypted_memory)
print("Decrypted message:", decrypted_message)

'''
# Decrypted message: tipsen and PapaChicken met at the library at 10 PM to delve into the intricacies of CTF challenges over cups of steaming coffee. As they wrapped up their discussion, ready to head home, PapaChicken realized his wallet was nowhere to be found. Panic turned into curiosity as they examined the scene like seasoned cryptographers. The missing wallet wasn't just an inconvenience but a cryptic puzzle waiting to be decrypted, challenging them to apply their CTF skills to unravel the mystery of its disappearance in the late-night library labyrinth. Solve this to help PapaChicken find his wallet :c

from Crypto.Util.number import getPrime, bytes_to_long

while True:
    try:
        p = getPrime(512)
        q = getPrime(512)
        n = []

        for i in range(16):
            q = p
            p = getPrime(512)
            n.append(p * q)

        m = bytes_to_long(b'COMPFEST16{SECRET}')
        e = 65537
        c = pow(m, e, n[0])

        for i in range(1, 16):
            assert c < n[i], i
            c = pow(c, e, n[i])

        with open('chall2_mem.txt', 'w') as f:
            f.write(f"n = {n}\n")
            f.write(f"e = {e}\n")
            f.write(f"c = {c}\n")

        break
    
    except AssertionError as e:
        print(f"Assertion error: {e}. Retrying...")
'''

n = [87646825913971345918694957042320244722876855536581309860693610320129924410642065995145234678954250783681482333017776342464366599019370841459416169059024070989034768758429616535838207939610139695416845464306575366762765639470044600794322731715261854295002837488922056948785513989713762355338586279372301525771, 115770503634966998063522697823948897568352070359313280500227381060758354480574892178247425124821891167996647599480712155507221234201605100673633169441248037548557213207090163854399064731016657913828132232955390624715843139794713508466326528048272934305700606001628568041836067443603373942064997361068558025807, 98190578840173507417869429175495529359241992368243737010800305058974578235667468931239847112770799479485041239415650806755375701532294671045275325946769837656183036592812213048132742727547251220858599710463898304641118825177413503851858251938861612859774940317065854094289936263444107614881312731960067477629, 107318457865119100117889600303663281769578482805037150130855364675702004397958721361063241088054676554419091024867411295228658636410404219176322161023126110791138489054220861467834297705533266486963740201070124925962735897029595838026605565948561536257972342537876726277497257477281913627602325893658138026309, 113667431370346930775350921975534485211455821814934578942395505584667525945672695977551201011611495166949631388562931802712962859867632151581211615745921310171355076333455964781844603828751442426556182638662428652913817896210358695020771501665702863700057313658453810745292419711613644936738809743502843127323, 114176224002089758247801997992284675346589381253790001596978048499969985877632178840643994308971558251571646535537804892053814031835790565322945161992937999807070507637704799400350339796207959294660238962215229534022950129975340098195306565262516363199756322527382030267352731251975103248723622970171769062757, 143328917401853015605546890844164972799569766048483671245995591364338033499255677840289605888737857549586677582032862119467829280378572871006918598074460121209383564621768892648062441319227712750176150439534078638550965305331662950367116422804855403201492869905841162494126969159316448983420905206200199867757, 140499029355774780467701026929090040486983634847585205862661517797472597343471243812151375613431923040472893593166891437798659899318321178505416792787470874723567368378472244654574186426760544733746148554825706833420163626667319055338196126746433519850616511598322336488172255149963700695071477983360243262091, 137059141471200167807440339181124487619113772378717810918876158889759280209598043377219660484459951014053502676215326732271615702098063294427852979639653806442735034323442079886125273862216265176203278414220003029342294537720913293291658912105335254530614945126206078531337413611199659375906514977990081443453, 127651560750801238740653429893830054040840159121135340593012949428527005150443606558513181395941916947620646261878008225433135466282427358987799539936603899466354846233292290897063224253303230961873730204375018889384117536899567507852429756606029989140908481026053170833313579100075108355785310718960986326619, 118352003813089403717871437705722107693049404921523250523195912836265305317071785482055737889884463952323604857653778649975503997234386525048020827329377023070704231718693492351043628271120153295202373011154481684262244764546348844327215718162934338283445092335324843464004100017121804242660644746133890903971, 108667140113252034869925839697384482352098223492083670202844984385975670031726647788645911765238176991055979486444831078836778740522400513316451803608442448199596630207632159928621337452316958522717357863254789069106474985946855645587107806135023444340070223115216209717922593603898180416013291149555202195877, 126494593747040188938911212050075274410763089322815840984664198763549333583861140820163799027546445667684215521182390153318377130585997927150629685462577495645938103658315641987794320276551502094116324034978459371779264089005491479958012423979616384936868002867581065816382408142620718479687096910113535305547, 139984373647170756712191651712653654780135006665188052063098325506950778703891525105909362702207111482802964717936083317092131431594360390615093568386574694967449372541522867229861839638494730052797540185714928895378162829908640082005302530305287695203102388228457176653960161689043390347507153546664671403257, 139492508336134299538076463380099675881025583781746507180567058575814025505360586173140109933507948046564882880348500529114671282380397592763147988215822501013321805712598729909920193766927251029123939999787799596499042838633052828728744619982815822621238770695804748310609815624668854812763988956551457039639, 122029449704116233106663277356407432532487589311816826832671648326420134712683419973884972474148582569832658118426481362641255600959691143810822348774279184492888557035543072923382092605419330750736933812678384803209831737746621816564286293102033707931033004082738738227483682084945399064772874816448301883493]
e = 65537
c = 72268408868548134040012530313776129487267972483957199360424654135603162270989648925229848919895759092552170152966410528114148119398194129632350508369299266437149497442440476812371456675077683927822940016130595748195422958375103191160838192977054900441788828275673343532666162622780662427885580284981882871796

from math import gcd
from Crypto.Util.number import long_to_bytes

C = c
for i in range(len(n) - 1, 0, -1):
    p = gcd(n[i], n[(i-1)])
    q = n[i]//p
    phi = (p - 1)*(q - 1)
    d = pow(e, -1, phi)
    C = pow(C, d, n[i])
p = gcd(n[0], n[1])
q = n[0]//p
phi = (p - 1)*(q - 1)
d = pow(e, -1, phi)
C = pow(C, d, n[0])
print(long_to_bytes(C).decode())