from sage.all import *

e = 4680013789992958764661
n = 113512878655961571626610562291692317083167898593072246908072509473338669866931624486434843922077792562235492835323939380660867587409311081240029070350808655984402585845023288249807250489084430773691893497493957878187939757801622886103893275017257035278212160216032814012251157961899906789943525036078018769313
U = 1931999207628789396725122770203483408911326042952326921451
V = 799504796180001663308018451701479236857150404193865300422493
c = 94105129348907954980205351665290609913865320383526984688577432708537003146181471259880907643772804194349299707552600926808992628679380768658711570812064692302538521952981150231103309549852666196113547591789678339722493939214907786911484309585843582998176263433226474196365066591224488571958002184788519619403
Q = 2^199

for k in range(1, 1000000, 2):  # Try small odd k
    if gcd(2 * e, k) != 1:
        continue
    a0 = (-(e * U - 1) * inverse_mod(e * Q, k)) % k
    temp_base = e * (U + a0 * Q) - 1
    step = e * k * Q
    p_base = (temp_base // k) +  exchanges1 if temp_base % k == 0 else None
    if p_base and n % p_base == 0:
        p = p_base
        q = n // p
        break
    # Check nearby values (m = 0 to a few steps)
    for m in range(10):  # Limited range
        temp = temp_base + m * step
        if temp % k == 0:
            p_candidate = (temp // k) + 1
            if n % p_candidate == 0:
                p = p_candidate
                q = n // p
                break
    else:
        continue
    break
else:
    print("Increase k range")
    exit()

phi = (p - 1) * (q - 1)
d = inverse_mod(e, phi)
m = pow(c, d, n)
flag = long_to_bytes(m)
print(flag.decode())