# oPUN_SASS_SASS_l version 4.0.57392059573323092399775358664995080164653937262016805979183399297313325025274
# bob says 1157367295530760079023529110979649919368025180581384047424574109752982784793024959842606585241299770214689349362681022276703938178755778821045684446081986731134228509668493160869624311674500908113399363823275843320951284179638264656976406488906833726053722254651117954983222764503945411622975352990554289294306
# alice says 513889155168104014059572342663580061429914681859785183759124990498887393497705484723573270856713857126088944505914826806005372887907385177112890054002894940676310597945961643232534832981167118578710238587152646561502479226602489875425438323951377442759384599365854542485365236545136971754437985046353875703238
# bob says 18986306197549613063703475783723174313829692470029495182641744344887717273487903726826346095760335377914949999297913680960808327577033901605904129943636994753395912157919322330787435386625466546285111674245577675767748141644708437237476891396311945937600057499589239482161984093410293391439032526272378004425

import random
from sage.all import ZZ
from Crypto.Util.number import long_to_bytes

CIPHER_SUITE = 57392059573323092399775358664995080164653937262016805979183399297313325025274
random.seed(CIPHER_SUITE)

GSIZE = 8209
GNUM = 79

LIM = GSIZE**GNUM


def gen(n):
    p, i = [0] * n, 0
    for j in random.sample(range(1, n), n - 1):
        p[i], i = j, j
    return tuple(p)


def gexp(g, e):
    res = tuple(g)
    while e:
        if e & 1:
            res = tuple(res[i] for i in g)
        e >>= 1
        g = tuple(g[i] for i in g)
    return res


def enc(k, m, G):
    if not G:
        return m
    mod = len(G[0])
    return gexp(G[0], k % mod)[m % mod] + enc(k // mod, m // mod, G[1:]) * mod


def inverse(perm):
    res = list(perm)
    for i, v in enumerate(perm):
        res[v] = i
    return res

G = [gen(GSIZE) for i in range(GNUM)]
G_inv = [inverse(g) for g in G]

bob_encr = 1157367295530760079023529110979649919368025180581384047424574109752982784793024959842606585241299770214689349362681022276703938178755778821045684446081986731134228509668493160869624311674500908113399363823275843320951284179638264656976406488906833726053722254651117954983222764503945411622975352990554289294306
alice_encr = 513889155168104014059572342663580061429914681859785183759124990498887393497705484723573270856713857126088944505914826806005372887907385177112890054002894940676310597945961643232534832981167118578710238587152646561502479226602489875425438323951377442759384599365854542485365236545136971754437985046353875703238
bob_decr = 18986306197549613063703475783723174313829692470029495182641744344887717273487903726826346095760335377914949999297913680960808327577033901605904129943636994753395912157919322330787435386625466546285111674245577675767748141644708437237476891396311945937600057499589239482161984093410293391439032526272378004425

bob_key = enc(alice_encr, bob_decr, G)
bk = ZZ(bob_key).digits(GSIZE)
be = ZZ(bob_encr).digits(GSIZE)
ae = ZZ(alice_encr).digits(GSIZE)
flag = []
ak = []
for i in range(GNUM):
    g = G[i]
    cycle = [0]
    while len(cycle) < GSIZE:
        cycle.append(g[cycle[-1]])
    x = cycle.index(bk[i])
    y = cycle.index(be[i])
    f = (y - x - 1) % GSIZE
    flag.append(f)
assert len(flag) == GNUM
f = sum(fi * GSIZE**i for i, fi in enumerate(flag))
