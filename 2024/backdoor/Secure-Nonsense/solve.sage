from hashlib import sha256

r = [81465729755604049515393044666108856933142341842986144453897504287323044472242, 72570248361872389488488946162360813393650074077629105936965680650428288559727, 85501920136841932773058305617162772773952014507513809142870391246460247845893, 53710233092790823469144555520150684209472339363049421644294144434022881848824, 52722994419747645922346342144184475810828691708109391863709507211051102034068]
s = [104365256914255978268829511578547909210850490614041706196752828154668335653451, 62434757232108833310195194235782829512666833623682479172818897201736359601194, 79145072946835916765633522194819185325302293063603977704410294525006333382577, 84389251014635711199372866158640609154898242729618721937321993697639018666170, 103724058514438969507095431837734391066670737806459683456909555945222921480270]
messages = ['Hi', 'How are you doing?', 'here are some signatures', 'for you to understand how this works', 'have fun']
q = floor(1.337*sqrt(n))

def hash(m):
    return Integer(sha256(m.encode()).hexdigest(), 16)

def recover_k(r1, s1, m1, r2, s2, m2):
    e1 = hash(m1)
    e2 = hash(m2)
    k = ((e1 - e2) * inverse_mod(s1 - s2, q)) % q
    return k

def recover_d(r, s, k, m):
    e = hash(m)
    d = ((s * k - e) * inverse_mod(r, q)) % q
    return d

k = recover_k(r_values[0], s_values[0], messages[0], r_values[1], s_values[1], messages[1])
d = recover_d(r_values[0], s_values[0], k, messages[0])

print("Recovered private key d:", d)