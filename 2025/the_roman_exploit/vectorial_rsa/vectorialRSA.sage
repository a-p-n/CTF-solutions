from tqdm import trange
from Crypto.Util.number import long_to_bytes
from Crypto.Cipher import AES
import hashlib

e1 = [2, 3, 5, 7]
a1 = [69, 420, 1337, 9001]
e2 = [11, 13, 17, 19]
a2 = [72, 95, 237, 1001]
n = 64541532379927077000559872397264097749021972434205531336066931690486076647705413170185144940288988381635799051758671701941067093853968684354158364531117205968958931132385165913434941347527993061497902723498417954305499807823689010185704770834752024422286910181187814374841629893530443736915542004920807142781
eA = 27
eB = 35
cA = 44022142978819419618353382999440345073976186907275599632322745080012623162430540188907724797065065001963223657911160722898910372812863352246726924386760519377252296888984296509586878063185483891399718374344520697641288446229397649573154526152818589294889851730684140323675940582528405188097712041985150863134
cB = 36492103245285092647843551854942925373394229095706870054555977026553850101701906739652840770223455473246919620658344617649832752419944319254556813129428929352359138539967235739316345067424590082471814489355137379436050816028192665505036173068173821426333394966323037686047535779525861943853094214085274696593
iv = bytes.fromhex('922d9991e13113013496ada61eb3103c')
ciphertext = bytes.fromhex('5d2a59c1b5a5268baea17b095ad62310a0442eeeb2a6497f4074d70628f4ec5d51008a4ff12a6ea722e171656386f698ae530ac0824b0f5a77a93e2c063ac2f1')

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a.monic()

def FranklinReiter(f1, f2):
    return int(-gcd(f1, f2).coefficients()[0])


P.<X> = PolynomialRing(Zmod(n))
f1 = (sum([a * X**e for a, e in zip(a1, e1)]))**eB - cA
#for brute in trange(-2**16, 2**16):
for brute in trange(54800, 2**16):
    f2 = sum([a * (X-brute)**e for a, e in zip(a2, e2)]) ** eA - cB
    kA = FranklinReiter(f1, f2)
    if kA.bit_length() < 1000:
        break
kB = kA - brute


c1 = sum([a * pow(kA, e, n) for a, e in zip(a1, e1)])  
c2 = sum([a * pow(kB, e, n) for a, e in zip(a2, e2)]) 
cA = pow(c1, eB, n) 
cB = pow(c2, eA, n)  

key = long_to_bytes(c1 + c2)
key = hashlib.sha256(key).digest()
cipher = AES.new(key, AES.MODE_CBC, iv)
flag = cipher.decrypt(ciphertext)  
print(flag)
