

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297 = Integer(147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297); _sage_const_1 = Integer(1); _sage_const_256 = Integer(256); _sage_const_128 = Integer(128); _sage_const_511 = Integer(511); _sage_const_2 = Integer(2); _sage_const_384 = Integer(384); _sage_const_0 = Integer(0)# Load the Coppersmith implementation
load('coppersmith.sage')

# Given values
n = _sage_const_147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297 

# Compute b (from previous steps)
r_mod = (_sage_const_1  << _sage_const_256 ) - (n % (_sage_const_1  << _sage_const_256 ))
p_bits = []
for i in range(_sage_const_128 , _sage_const_256 ):
    pos = _sage_const_511  - _sage_const_2  * i
    bit = (r_mod >> pos) & _sage_const_1 
    p_bits.append(bit)
b = sum(bit * (_sage_const_1  << j) for j, bit in enumerate(p_bits[::-_sage_const_1 ]))

# Define the polynomial ring and polynomial
R = Integers(n)
P = PolynomialRing(R, names=('a',)); (a,) = P._first_ngens(1)
f = a * (_sage_const_1  << _sage_const_384 ) + b * (_sage_const_1  << _sage_const_256 ) + ((_sage_const_1  << _sage_const_256 ) - _sage_const_1 )

# Set bounds (a < 2^128)
bounds = (_sage_const_2 **_sage_const_128 ,)

# Apply Coppersmith's method
roots = small_roots(f, bounds, m=_sage_const_2 )
print("Roots:", roots)

# Recover p, q, r
for a in roots:
    p = a * (_sage_const_1  << _sage_const_128 ) + b
    q = p * (_sage_const_1  << _sage_const_256 ) + ((_sage_const_1  << _sage_const_256 ) - _sage_const_1 )
    if n % q == _sage_const_0 :
        r = n // q
        print(f"p = {p}")
        print(f"q = {q}")
        print(f"r = {r}")
        break

