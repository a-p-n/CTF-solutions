# we have 264 lsbs of the private key d
# we can recover the msbs using coppersmith 
# Used the script here: https://github.com/arusson/rsatools
# and recovered the primes p and q
# from there, just decrypt the ciphertext given using the recovered primes, and find the flag
# bytes.fromhex(hex(pow(c,pow(e,-1,(p-1)*(q-1)),n))[2:]).decode()

e = 149
leak = 6001958312144157007304943931113872134090201010357773442954181100786589106572169
n = 88436063749749362190546240596734626745594171540325086418270903156390958817492063940459108934841028734921718351342152598224670602551497995639921650979296052943953491639892805985538785565357751736799561653032725751622522198746331856539251721033316195306373318196300612386897339425222615697620795751869751705629
c = 58064034919290611425318979044251233043307367338592434271520705142630256695300292742557470989514758812829578637705322075108849184034214079815168950909257727593842696875265180239425397887757956078862042802996557884275633264196055546402068708323290198423684939624230328528498527478735524752152887413794806886338

# --------Recovered p and q values -----------#
p = 11158174168280917736979570452068827611755694573672250873587467083259280584739528118050085070475912733864211083865201596017044398008278425498714490994488939
q = 7925675152225576863100620763786068193447242109602444766746498365318038990982172920913504531457495997657677303402376317228248257041003784092851544572130711

assert n == p * q
# --------------------------------------------#

print(bytes.fromhex(hex(pow(c, pow(e,-1,(p-1)*(q-1)),n))[2:]).decode())