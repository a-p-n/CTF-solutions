from sage.all import *
from hashlib import sha256

# Given values
N = 39857078746406469131129281921490520306196739933449401384580614683236877901453146754149222509812535866333862501431453065249306959004319408436548574942416212329735258587670686655658056553446879680643872518009328886406310298097685861873954727153720761248262606469217940464611561028443119183464419610396387619860313813067179519809796028310723320608528262638653826016645983671026819244220510314301178181698134390850683834304169240632402535087021483298892547974104858755498823118164815682452718215716370727477136888839954993949013970026988378086175471190518276414200966496353144747778470590767485019943178534397845127421058830430797806265311195099187747227867325234593386438995618936934586514932401108874934000734850169069717060963988677462779177959990601405850727404268354600078746523164279
E1 = 17599828213549223253832044274649684283770977196846184512551517947600728059
E2 = 13524024408490227176018717697716068955892095093578246398907145843636542721
y = 145617880125193951283015789736417282722015630408969828353957184191080354290652709572202852525492664840174728737092374591502835441277377203057513977
x = 181424264518126894353827900926958467207362488955057780307185145719398164059551620250706463313012003901739206610966723766643715651081101609981818048

M = E1 * E2

# Compute square root of y mod E1
r = Mod(y, E1).sqrt()
r = lift(r)  # Convert to integer

# CRT candidates
c1 = CRT_list([r, 1], [E1, E2])
c2 = CRT_list([-r % E1, 1], [E1, E2])

# Test candidates
for c in [c1, c2]:
    for k in range(10):  # Try small k
        Q = c + k * M
        if Q > 1 and is_prime(Q) and N % (Q^2) == 0:
            P = N // (Q^2)
            if is_prime(P):
                print(f"Q = {Q}")
                print(f"P = {P}")
                H = sha256(str(Q).encode()).hexdigest()
                flag = f"r3ctf{{{H}}}"
                print(f"Flag: {flag}")
                break
    else:
        continue
    break